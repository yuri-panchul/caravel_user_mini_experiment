# generated by get_cup_sdc.py
# Date: 2023/03/02
### Note:   - input clock transition and latency are set based on the wb_clk_i port. 
###           If your design is using the user_clock2, update the constraints to use usr_* variables. 
###         - input delays for wbs_adr_i[0] and wbs_adr_i[1] are assumed to be 0 as they're not reported (constants)
###         - IO ports are assumed to be asynchronous. If they're synchronous to the clock, update the variable IO_SYNC to 1. 
###           As well, update in_ext_delay and out_ext_delay with the required I/O external delays.

#------------------------------------------#
# Pre-defined Constraints
#------------------------------------------#

# Clock network
if {[info exists ::env(CLOCK_PORT)] && $::env(CLOCK_PORT) != ""} {
	set clk_input $::env(CLOCK_PORT)
	create_clock [get_ports $clk_input] -name clk -period $::env(CLOCK_PERIOD)
	puts "\[INFO\]: Creating clock {clk} for port $clk_input with period: $::env(CLOCK_PERIOD)"
} else {
	set clk_input __VIRTUAL_CLK__
	create_clock -name clk -period $::env(CLOCK_PERIOD)
	puts "\[INFO\]: Creating virtual clock with period: $::env(CLOCK_PERIOD)"
}
if { ![info exists ::env(SYNTH_CLK_DRIVING_CELL)] } {
	set ::env(SYNTH_CLK_DRIVING_CELL) $::env(SYNTH_DRIVING_CELL)
}
if { ![info exists ::env(SYNTH_CLK_DRIVING_CELL_PIN)] } {
	set ::env(SYNTH_CLK_DRIVING_CELL_PIN) $::env(SYNTH_DRIVING_CELL_PIN)
}

# Clock non-idealities
set_propagated_clock [get_clocks {clk}]
set_clock_uncertainty $::env(SYNTH_CLOCK_UNCERTAINTY) [get_clocks {clk}]
puts "\[INFO\]: Setting clock uncertainity to: $::env(SYNTH_CLOCK_UNCERTAINTY)"
set_clock_transition $::env(SYNTH_CLOCK_TRANSITION) [get_clocks {clk}]
puts "\[INFO\]: Setting clock transition to: $::env(SYNTH_CLOCK_TRANSITION)"

# Maximum transition time of the design nets
set_max_transition $::env(SYNTH_MAX_TRAN) [current_design]
puts "\[INFO\]: Setting maximum transition to: $::env(SYNTH_MAX_TRAN)"

# Maximum fanout
set_max_fanout $::env(SYNTH_MAX_FANOUT) [current_design]
puts "\[INFO\]: Setting maximum fanout to: $::env(SYNTH_MAX_FANOUT)"

# Timing paths delays derate
set_timing_derate -early [expr {1-$::env(SYNTH_TIMING_DERATE)}]
set_timing_derate -late [expr {1+$::env(SYNTH_TIMING_DERATE)}]
puts "\[INFO\]: Setting timing derate to: [expr {$::env(SYNTH_TIMING_DERATE) * 100}] %"

#------------------------------------------#
# Retrieved Constraints
#------------------------------------------#

# Clock source latency
set usr_clk_max_latency 4.7
set usr_clk_min_latency 4.24
set clk_max_latency 6
set clk_min_latency 4.5
set_clock_latency -source -max $clk_max_latency [get_clocks {clk}]
set_clock_latency -source -min $clk_min_latency [get_clocks {clk}]
puts "\[INFO\]: Setting clock latency range: $clk_min_latency : $clk_max_latency"

# Clock input Transition
set usr_clk_tran 0.11
set clk_tran 0.6
set_input_transition $clk_tran [get_ports $clk_input]
puts "\[INFO\]: Setting clock transition: $clk_tran"

# Input delays
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {la_data_in[*]}]
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {la_oenb[*]}]
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {wb_rst_i}]
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {wbs_adr_i[*]}]
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {wbs_cyc_i}]
set_input_delay -max 10   -clock [get_clocks {clk}] [get_ports {wbs_dat_i[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_sel_i[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_stb_i}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_we_i}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {la_data_in[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {la_oenb[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wb_rst_i}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_adr_i[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_cyc_i}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_dat_i[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_sel_i[*]}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_stb_i}]
set_input_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_we_i}]

# Input Transition
set_input_transition -max 0.44  [get_ports {io_in[*]}]
set_input_transition -max 0.44  [get_ports {la_data_in[*]}]
set_input_transition -max 0.44  [get_ports {la_oenb[*]}]
set_input_transition -max 0.44  [get_ports {wb_rst_i}]
set_input_transition -max 0.44  [get_ports {wbs_adr_i[*]}]
set_input_transition -max 0.44  [get_ports {wbs_cyc_i}]
set_input_transition -max 0.44  [get_ports {wbs_dat_i[*]}]
set_input_transition -max 0.44  [get_ports {wbs_sel_i[*]}]
set_input_transition -max 0.44  [get_ports {wbs_stb_i}]
set_input_transition -max 0.44  [get_ports {wbs_we_i}]
set_input_transition -min 0.05  [get_ports {io_in[*]}]
set_input_transition -min 0.05  [get_ports {la_data_in[*]}]
set_input_transition -min 0.05  [get_ports {la_oenb[*]}]
set_input_transition -min 0.05  [get_ports {wb_rst_i}]
set_input_transition -min 0.05  [get_ports {wbs_adr_i[*]}]
set_input_transition -min 0.05  [get_ports {wbs_cyc_i}]
set_input_transition -min 0.05  [get_ports {wbs_dat_i[*]}]
set_input_transition -min 0.05  [get_ports {wbs_sel_i[*]}]
set_input_transition -min 0.05  [get_ports {wbs_stb_i}]
set_input_transition -min 0.05  [get_ports {wbs_we_i}]

# Output delays
set_output_delay -max 10   -clock [get_clocks {clk}] [get_ports {la_data_out[*]}]
set_output_delay -max 10   -clock [get_clocks {clk}] [get_ports {user_irq[*]}]
set_output_delay -max 10   -clock [get_clocks {clk}] [get_ports {wbs_ack_o}]
set_output_delay -max 10   -clock [get_clocks {clk}] [get_ports {wbs_dat_o[*]}]
set_output_delay -min 0    -clock [get_clocks {clk}] [get_ports {la_data_out[*]}]
set_output_delay -min 0    -clock [get_clocks {clk}] [get_ports {user_irq[*]}]
set_output_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_ack_o}]
set_output_delay -min 0    -clock [get_clocks {clk}] [get_ports {wbs_dat_o[*]}]

# Output loads
set_load 0.14  [get_ports {io_oeb[*]}]
set_load 0.14  [get_ports {io_out[*]}]
set_load 0.14  [get_ports {la_data_out[*]}]
set_load 0.14  [get_ports {user_irq[*]}]
set_load 0.14  [get_ports {wbs_ack_o}]
set_load 0.14  [get_ports {wbs_dat_o[*]}]